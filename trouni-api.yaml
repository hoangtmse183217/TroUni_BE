openapi: 3.0.3
info:
  title: TroUni API
  description: |
    API documentation for TroUni - University Roommate Finding Platform
    
    ## Authentication
    Most endpoints require JWT authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Getting Started
    1. Register a new user using `/auth/signup`
    2. Login using `/auth/login` to get your JWT token
    3. Use the token in subsequent requests
    
  version: 1.0.0
  contact:
    name: TroUni Team
    email: trouni01@gmail.com
    url: https://trouni.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - description: Production Server
    url: https://trouni-228432317225.asia-east1.run.app
  - url: http://localhost:8080
    description: Local Development Server
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/nymari/TroUni/1.0.0

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user with username/email and password. Returns JWT token and user information.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              usernameOrEmail: "testuser"
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Login successful"
                data:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  id: 1
                  username: "testuser"
                  email: "test@example.com"
                  role: "STUDENT"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: false
                errorCode: "INVALID_CREDENTIALS"
                message: "Invalid username/email or password!"

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: User Registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            example:
              username: "newuser"
              email: "newuser@example.com"
              password: "password123"
              firstName: "John"
              lastName: "Doe"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Registration successful"
                data:
                  message: "User registered successfully!"
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: false
                errorCode: "REGISTRATION_ERROR"
                message: "Username or email already exists"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Logout user and blacklist JWT token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User logged out successfully!"
                data: null

  /auth/google-login:
    post:
      tags:
        - Authentication
      summary: Google OAuth Login
      description: Authenticate user using Google OAuth access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLoginRequest'
            example:
              accessToken: "google_access_token_here"
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Google login successful!"
                data:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  id: 1
                  username: "googleuser"
                  email: "user@gmail.com"
                  role: "STUDENT"

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get Current User
      description: Get information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User information retrieved successfully"
                data:
                  id: 1
                  username: "testuser"
                  email: "test@example.com"
                  role: "STUDENT"
                  status: "ACTIVE"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Forgot Password
      description: Send password reset email to user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            example:
              email: "user@example.com"
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Password reset email sent successfully"
                data:
                  message: "Password reset instructions have been sent to your email address."

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset Password
      description: Reset password using token from email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            example:
              token: "reset_token_from_email"
              newPassword: "newpassword123"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Password reset successfully"
                data:
                  message: "Password has been reset successfully. You can now login with your new password."

  # User Management Endpoints
  /user/users:
    get:
      tags:
        - User Management
      summary: Get All Users
      description: Get list of all users (for debugging/testing)
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Users retrieved successfully"
                data:
                  - id: 1
                    username: "testuser"
                    email: "test@example.com"
                    role: "STUDENT"
                    status: "ACTIVE"
                    createdAt: "2024-01-01T00:00:00"
                    updatedAt: "2024-01-01T00:00:00"

  /user/{username}:
    get:
      tags:
        - User Management
      summary: Get User by Username
      description: Get user information by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: "testuser"
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User found"
                data:
                  id: 1
                  username: "testuser"
                  email: "test@example.com"
                  role: "STUDENT"
                  status: "ACTIVE"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"
        '404':
          description: User not found

  /user/me:
    put:
      tags:
        - User Management
      summary: Update Current User
      description: Update information of the currently authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              username: "newusername"
              email: "newemail@example.com"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User updated successfully!"
                data:
                  id: 1
                  username: "newusername"
                  email: "newemail@example.com"
                  role: "STUDENT"
                  status: "ACTIVE"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

  /user/{userId}:
    put:
      tags:
        - User Management
      summary: Admin/Manager Update User
      description: Admin or Manager update user information
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserRequest'
            example:
              username: "updateduser"
              email: "updated@example.com"
              role: "LANDLORD"
              status: "ACTIVE"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Update failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags:
        - User Management
      summary: Delete User (Soft Delete)
      description: Soft delete user account (admin or manager only) - Sets status to DELETED
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User deleted successfully!"
                data:
                  id: 1
                  username: "deleteduser"
                  email: "deleted@example.com"
                  role: "STUDENT"
                  status: "DELETED"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

  /user/{userId}/hard-delete:
    delete:
      tags:
        - User Management
      summary: Hard Delete User (Admin Only)
      description: |
        Permanently delete user and all related data from database (Admin only)
        
        **WARNING: This action cannot be undone!**
        
        This will delete:
        - User account and profile
        - All bookmarks, reviews, reports, notifications
        - All rooms owned by the user (if landlord)
        - All subscriptions and payments
        - All verification records
        - All related data permanently
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User permanently deleted from database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "User permanently deleted from database!"
                data:
                  deletedUser:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    username: "deleteduser"
                    email: "deleted@example.com"
                    role: "STUDENT"
                    status: "ACTIVE"
                    createdAt: "2024-01-01T00:00:00"
                    updatedAt: "2024-01-01T00:00:00"
                  deletedRecordsCount: 15
                  message: "User and all related data have been permanently deleted from database"
        '400':
          description: Hard delete failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: false
                errorCode: "ACCESS_DENIED"
                message: "Only admin can perform hard delete"
        '403':
          description: Access denied - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Profile Management Endpoints
  /profile/me:
    get:
      tags:
        - Profile Management
      summary: Get Current User Profile
      description: Get profile information of the currently authenticated user
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Profile retrieved successfully!"
                data:
                  id: 1
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  fullName: "John Doe"
                  gender: "male"
                  phoneNumber: "0123456789"
                  avatarUrl: "https://example.com/avatar.jpg"
                  badge: "Tin uy tín"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

    put:
      tags:
        - Profile Management
      summary: Update Current User Profile
      description: Update profile information of the currently authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            example:
              fullName: "John Updated Doe"
              gender: "male"
              phoneNumber: "0987654321"
              avatarUrl: "https://example.com/new-avatar.jpg"
              badge: "New Badge"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Profile updated successfully!"
                data:
                  id: 1
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  fullName: "John Updated Doe"
                  gender: "male"
                  phoneNumber: "0987654321"
                  avatarUrl: "https://example.com/new-avatar.jpg"
                  badge: "New Badge"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

  /profile/{userId}:
    get:
      tags:
        - Profile Management
      summary: Get Profile by User ID
      description: Get profile information by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Profile retrieved successfully!"
                data:
                  id: 1
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  fullName: "John Doe"
                  gender: "male"
                  phoneNumber: "0123456789"
                  avatarUrl: "https://example.com/avatar.jpg"
                  badge: "Tin uy tín"
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"

  # Email Verification Endpoints
  /email-verification/verify:
    post:
      tags:
        - Email Verification
      summary: Verify Email
      description: Verify email address with 6-digit verification code
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
            example:
              email: "user@example.com"
              verificationCode: "123456"
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: "200"
                message: "Email verified successfully!"
                data:
                  email: "user@example.com"
                  verified: true
                  verifiedAt: "2024-01-01T10:00:00"
        '400':
          description: Verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: "400"
                message: "Verification failed"

  /email-verification/resend:
    post:
      tags:
        - Email Verification
      summary: Resend Verification Code
      description: Resend verification code to email address
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendCodeRequest'
            example:
              email: "user@example.com"
      responses:
        '200':
          description: Verification code resent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: "200"
                message: "Verification code resent successfully!"
                data:
                  email: "user@example.com"
                  expiresAt: "2024-01-01T10:05:00"

  /email-verification/info:
    get:
      tags:
        - Email Verification
      summary: Get Verification Info
      description: Get verification status and information for an email
      security: []
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: Verification info retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: "200"
                message: "Verification info retrieved successfully"
                data:
                  email: "user@example.com"
                  verified: false
                  attempts: 1
                  maxAttempts: 3
                  expiresAt: "2024-01-01T10:05:00"
                  canAttempt: true
        '404':
          description: Verification info not found

  # Room Management Endpoints
  /rooms:
    get:
      tags:
        - Room Management
      summary: Get Available Rooms
      description: Get list of available rooms with pagination and sorting
      security: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Page size
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: "createdAt"
          description: Sort field
        - name: sortDir
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
          description: Sort direction
      responses:
        '200':
          description: Available rooms retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Available rooms retrieved successfully"
                data:
                  content:
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      title: "Cozy Studio Apartment"
                      description: "Beautiful studio near university"
                      roomType: "PHONG_TRO"
                      city: "Ho Chi Minh City"
                      district: "District 1"
                      pricePerMonth: 5000000
                      areaSqm: 25.5
                      status: "available"
                      viewCount: 150
                      landlord:
                        id: "456e7890-e89b-12d3-a456-426614174001"
                        username: "landlord1"
                        email: "landlord@example.com"
                        fullName: "John Landlord"
                        phoneNumber: "0123456789"
                      images:
                        - id: "789e0123-e89b-12d3-a456-426614174002"
                          imageUrl: "https://example.com/room1.jpg"
                          isPrimary: true
                      amenities:
                        - id: "012e3456-e89b-12d3-a456-426614174003"
                          name: "Wi-Fi"
                          description: "High-speed internet"
                          iconUrl: "https://example.com/wifi-icon.png"
                  totalElements: 50
                  totalPages: 5
                  size: 10
                  number: 0

  /rooms/search:
    get:
      tags:
        - Room Management
      summary: Search Rooms
      description: Search rooms by multiple criteria
      security: []
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
          description: City name
        - name: district
          in: query
          required: false
          schema:
            type: string
          description: District name
        - name: minPrice
          in: query
          required: false
          schema:
            type: number
          description: Minimum price
        - name: maxPrice
          in: query
          required: false
          schema:
            type: number
          description: Maximum price
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Room search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /rooms/{roomId}:
    get:
      tags:
        - Room Management
      summary: Get Room Details
      description: Get detailed information about a specific room (requires authentication)
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Room details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Room details retrieved successfully"
                data:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  title: "Cozy Studio Apartment"
                  description: "Beautiful studio near university with modern amenities"
                  roomType: "PHONG_TRO"
                  streetAddress: "123 Nguyen Hue Street"
                  city: "Ho Chi Minh City"
                  district: "District 1"
                  ward: "Ben Nghe Ward"
                  latitude: 10.7769
                  longitude: 106.7009
                  pricePerMonth: 5000000
                  areaSqm: 25.5
                  status: "available"
                  viewCount: 151
                  createdAt: "2024-01-01T00:00:00"
                  updatedAt: "2024-01-01T00:00:00"
                  landlord:
                    id: "456e7890-e89b-12d3-a456-426614174001"
                    username: "landlord1"
                    email: "landlord@example.com"
                    fullName: "John Landlord"
                    phoneNumber: "0123456789"
                    avatarUrl: "https://example.com/landlord-avatar.jpg"
                  images:
                    - id: "789e0123-e89b-12d3-a456-426614174002"
                      imageUrl: "https://example.com/room1.jpg"
                      description: "Main room view"
                      isPrimary: true
                      createdAt: "2024-01-01T00:00:00"
                  amenities:
                    - id: "012e3456-e89b-12d3-a456-426614174003"
                      name: "Wi-Fi"
                      description: "High-speed internet connection"
                      iconUrl: "https://example.com/wifi-icon.png"
                  reviewSummary:
                    averageScore: 4.5
                    totalReviews: 10
                    fiveStarCount: 6
                    fourStarCount: 3
                    threeStarCount: 1
                    twoStarCount: 0
                    oneStarCount: 0
        '404':
          description: Room not found

  /rooms/{roomId}/analytics:
    get:
      tags:
        - Room Management
      summary: Get Room Analytics
      description: Get analytics data for a room (landlord or admin only - managers cannot access analytics)
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Room analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Room analytics retrieved successfully"
                data:
                  totalViews: 151
                  viewsThisWeek: 25
                  viewsThisMonth: 89
                  bookmarkCount: 12
                  lastViewedAt: "2024-01-01T10:30:00"
                  isBoosted: true
                  boostExpiresAt: "2024-01-07T00:00:00"

  # Bookmark Management Endpoints
  /bookmarks:
    get:
      tags:
        - Bookmark Management
      summary: Get User Bookmarks
      description: Get paginated list of user's bookmarked rooms (all authenticated users)
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Bookmarks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Bookmarks retrieved successfully"
                data:
                  content:
                    - userId: "123e4567-e89b-12d3-a456-426614174000"
                      roomId: "456e7890-e89b-12d3-a456-426614174001"
                      roomTitle: "Cozy Studio Apartment"
                      roomCity: "Ho Chi Minh City"
                      roomDistrict: "District 1"
                      roomPrice: 5000000
                      roomStatus: "available"
                      primaryImageUrl: "https://example.com/room1.jpg"
                      bookmarkedAt: "2024-01-01T10:00:00"
                  totalElements: 5
                  totalPages: 1
                  size: 10
                  number: 0

    post:
      tags:
        - Bookmark Management
      summary: Bookmark Room
      description: Add a room to bookmarks (all authenticated users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkRequest'
            example:
              roomId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Room bookmarked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Room bookmarked successfully"
                data:
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  roomId: "456e7890-e89b-12d3-a456-426614174001"
                  roomTitle: "Cozy Studio Apartment"
                  roomCity: "Ho Chi Minh City"
                  roomDistrict: "District 1"
                  roomPrice: 5000000
                  roomStatus: "available"
                  primaryImageUrl: "https://example.com/room1.jpg"
                  bookmarkedAt: "2024-01-01T10:00:00"

  /bookmarks/all:
    get:
      tags:
        - Bookmark Management
      summary: Get All User Bookmarks
      description: Get all user's bookmarks without pagination (all authenticated users)
      responses:
        '200':
          description: All bookmarks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /bookmarks/{roomId}:
    delete:
      tags:
        - Bookmark Management
      summary: Remove Bookmark
      description: Remove a room from bookmarks (all authenticated users)
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Room unbookmarked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Room unbookmarked successfully"
                data: null

  /bookmarks/{roomId}/toggle:
    post:
      tags:
        - Bookmark Management
      summary: Toggle Bookmark
      description: Toggle bookmark status for a room (all authenticated users)
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bookmark toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /bookmarks/{roomId}/status:
    get:
      tags:
        - Bookmark Management
      summary: Check Bookmark Status
      description: Check if a room is bookmarked by current user (all authenticated users)
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bookmark status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Bookmark status retrieved successfully"
                data:
                  isBookmarked: true
                  roomId: "123e4567-e89b-12d3-a456-426614174000"

  # Roommate Post Management Endpoints
  /roommate-posts:
    get:
      tags:
        - Roommate Posts
      summary: Get Roommate Posts
      description: Get paginated list of roommate seeking posts
      security: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [open, closed]
          description: Filter by post status
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Roommate posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Roommate posts retrieved successfully"
                data:
                  content:
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      title: "Looking for roommate near HCMUS"
                      description: "Student looking for clean, quiet roommate"
                      desiredLocationText: "Near University of Science"
                      budgetMin: 2000000
                      budgetMax: 4000000
                      status: "open"
                      createdAt: "2024-01-01T00:00:00"
                      updatedAt: "2024-01-01T00:00:00"
                      author:
                        id: "456e7890-e89b-12d3-a456-426614174001"
                        username: "student1"
                        fullName: "Jane Student"
                        avatarUrl: "https://example.com/avatar.jpg"
                  totalElements: 25
                  totalPages: 3
                  size: 10
                  number: 0

    post:
      tags:
        - Roommate Posts
      summary: Create Roommate Post
      description: Create a new roommate seeking post (student only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoommatePostRequest'
            example:
              title: "Looking for roommate near HCMUS"
              description: "Student looking for clean, quiet roommate to share apartment"
              desiredLocationText: "Near University of Science, District 5"
              budgetMin: 2000000
              budgetMax: 4000000
      responses:
        '200':
          description: Roommate post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Roommate post created successfully"
                data:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  title: "Looking for roommate near HCMUS"
                  description: "Student looking for clean, quiet roommate to share apartment"
                  desiredLocationText: "Near University of Science, District 5"
                  budgetMin: 2000000
                  budgetMax: 4000000
                  status: "open"
                  createdAt: "2024-01-01T10:00:00"
                  updatedAt: "2024-01-01T10:00:00"
                  author:
                    id: "456e7890-e89b-12d3-a456-426614174001"
                    username: "student1"
                    fullName: "Jane Student"
                    avatarUrl: "https://example.com/avatar.jpg"

  /roommate-posts/{postId}:
    get:
      tags:
        - Roommate Posts
      summary: Get Roommate Post Details
      description: Get detailed information about a roommate post
      security: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Roommate post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags:
        - Roommate Posts
      summary: Update Roommate Post
      description: Update a roommate post (author only)
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoommatePostRequest'
            example:
              title: "Updated: Looking for roommate near HCMUS"
              description: "Updated description"
              budgetMax: 5000000
              status: "open"
      responses:
        '200':
          description: Roommate post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags:
        - Roommate Posts
      summary: Delete Roommate Post
      description: Delete a roommate post (author, admin, or manager)
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Roommate post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Roommate post deleted successfully"
                data: null

  /roommate-posts/my-posts:
    get:
      tags:
        - Roommate Posts
      summary: Get Current User's Posts
      description: Get all roommate posts created by current user (student only)
      responses:
        '200':
          description: User posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /roommate-posts/search/budget:
    get:
      tags:
        - Roommate Posts
      summary: Search Posts by Budget
      description: Search roommate posts by budget range
      security: []
      parameters:
        - name: minBudget
          in: query
          required: true
          schema:
            type: number
        - name: maxBudget
          in: query
          required: true
          schema:
            type: number
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Budget search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /roommate-posts/search/location:
    get:
      tags:
        - Roommate Posts
      summary: Search Posts by Location
      description: Search roommate posts by desired location
      security: []
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Location search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Report Management Endpoints
  /reports:
    get:
      tags:
        - Report Management
      summary: Get All Reports
      description: Get paginated list of all reports (manager/admin only)
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, reviewed, resolved, dismissed]
          description: Filter by report status
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Reports retrieved successfully"
                data:
                  content:
                    - id: "123e4567-e89b-12d3-a456-426614174000"
                      reportedContentType: "room"
                      reportedContentId: "456e7890-e89b-12d3-a456-426614174001"
                      reason: "Inappropriate content"
                      status: "pending"
                      createdAt: "2024-01-01T10:00:00"
                      reporter:
                        id: "789e0123-e89b-12d3-a456-426614174002"
                        username: "reporter1"
                      reportedContent:
                        contentId: "456e7890-e89b-12d3-a456-426614174001"
                        contentType: "room"
                        title: "Reported Room Title"
                        summary: "Room in Ho Chi Minh City, District 1"
                        exists: true
                  totalElements: 15
                  totalPages: 2
                  size: 10
                  number: 0

    post:
      tags:
        - Report Management
      summary: Create Report
      description: Report inappropriate content (student/landlord only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
            example:
              reportedContentType: "room"
              reportedContentId: "123e4567-e89b-12d3-a456-426614174000"
              reason: "This room listing contains inappropriate content"
      responses:
        '200':
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Report created successfully"
                data:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  reportedContentType: "room"
                  reportedContentId: "456e7890-e89b-12d3-a456-426614174001"
                  reason: "This room listing contains inappropriate content"
                  status: "pending"
                  createdAt: "2024-01-01T10:00:00"
                  reporter:
                    id: "789e0123-e89b-12d3-a456-426614174002"
                    username: "reporter1"
                  reportedContent:
                    contentId: "456e7890-e89b-12d3-a456-426614174001"
                    contentType: "room"
                    title: "Reported Room Title"
                    summary: "Room in Ho Chi Minh City, District 1"
                    exists: true

  /reports/my-reports:
    get:
      tags:
        - Report Management
      summary: Get Current User's Reports
      description: Get all reports created by current user
      responses:
        '200':
          description: User reports retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /reports/{reportId}/status:
    put:
      tags:
        - Report Management
      summary: Update Report Status
      description: Update the status of a report (manager/admin only)
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, reviewed, resolved, dismissed]
              required:
                - status
            example:
              status: "resolved"
      responses:
        '200':
          description: Report status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /reports/stats/{contentType}/{contentId}:
    get:
      tags:
        - Report Management
      summary: Get Report Statistics
      description: Get report count for specific content (manager/admin only)
      parameters:
        - name: contentType
          in: path
          required: true
          schema:
            type: string
            enum: [room, user, roommate_post, review]
        - name: contentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Report statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Report statistics retrieved successfully"
                data:
                  contentType: "room"
                  contentId: "123e4567-e89b-12d3-a456-426614174000"
                  reportCount: 3

  /reports/categories:
    get:
      tags:
        - Report Management
      summary: Get Report Categories
      description: Get list of valid report content types
      security: []
      responses:
        '200':
          description: Report categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Report categories retrieved successfully"
                data:
                  - type: "room"
                    description: "Room listing"
                  - type: "user"
                    description: "User account"
                  - type: "roommate_post"
                    description: "Roommate seeking post"
                  - type: "review"
                    description: "Room review"

  /reports/statuses:
    get:
      tags:
        - Report Management
      summary: Get Report Statuses
      description: Get list of valid report statuses (manager/admin only)
      responses:
        '200':
          description: Report statuses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Report statuses retrieved successfully"
                data:
                  - status: "pending"
                    description: "Waiting for review"
                  - status: "reviewed"
                    description: "Under investigation"
                  - status: "resolved"
                    description: "Issue resolved"
                  - status: "dismissed"
                    description: "Report dismissed"

  # Debug/Testing Endpoints
  /user/check-token:
    post:
      tags:
        - Debug/Testing
      summary: Check Token Status
      description: Check if JWT token is blacklisted (for debugging)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: JWT token to check
              required:
                - token
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Token check completed"
                data:
                  isBlacklisted: false
                  message: "Token is valid"

  /user/blacklist-stats:
    get:
      tags:
        - Debug/Testing
      summary: Get Blacklist Statistics
      description: Get statistics about blacklisted tokens (for debugging)
      responses:
        '200':
          description: Blacklist stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "Blacklist stats retrieved successfully"
                data:
                  totalBlacklisted: 5
                  expiredTokens: 2
                  activeTokens: 3

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token obtained from login endpoint

  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Response data (varies by endpoint)
        errorCode:
          type: string
          description: Error code (only present when success is false)
      example:
        success: true
        message: "Operation successful"
        data: {}

    LoginRequest:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
          description: Username or email address
          example: "testuser"
        password:
          type: string
          format: password
          description: User password
          example: "password123"

    SignupRequest:
      type: object
      required:
        - username
        - email
        - password
        - firstName
        - lastName
      properties:
        username:
          type: string
          description: Unique username
          example: "newuser"
        email:
          type: string
          format: email
          description: Email address
          example: "newuser@example.com"
        password:
          type: string
          format: password
          description: User password
          example: "password123"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"

    GoogleLoginRequest:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          description: Google OAuth access token
          example: "google_access_token_here"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address to send reset instructions
          example: "user@example.com"

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Reset token from email
          example: "reset_token_from_email"
        newPassword:
          type: string
          format: password
          description: New password
          example: "newpassword123"

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: New username
          example: "newusername"
        email:
          type: string
          format: email
          description: New email address
          example: "newemail@example.com"

    AdminUpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: New username
          example: "updateduser"
        email:
          type: string
          format: email
          description: New email address
          example: "updated@example.com"
        role:
          type: string
          enum: [STUDENT, LANDLORD, MANAGER, ADMIN]
          description: User role
          example: "LANDLORD"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, DELETED]
          description: User status
          example: "ACTIVE"

    UpdateProfileRequest:
      type: object
      properties:
        fullName:
          type: string
          description: Full name
          example: "John Doe"
        gender:
          type: string
          enum: [male, female, other]
          description: Gender
          example: "male"
        phoneNumber:
          type: string
          description: Phone number
          example: "0123456789"
        avatarUrl:
          type: string
          format: uri
          description: Avatar image URL
          example: "https://example.com/avatar.jpg"
        badge:
          type: string
          description: User badge
          example: "Tin uy tín"

    VerifyEmailRequest:
      type: object
      required:
        - email
        - verificationCode
      properties:
        email:
          type: string
          format: email
          description: Email address to verify
          example: "user@example.com"
        verificationCode:
          type: string
          pattern: '^[0-9]{6}$'
          description: 6-digit verification code
          example: "123456"

    ResendCodeRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address to resend code
          example: "user@example.com"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        id:
          type: integer
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: "testuser"
        email:
          type: string
          format: email
          description: Email address
          example: "test@example.com"
        role:
          type: string
          enum: [STUDENT, LANDLORD, MANAGER, ADMIN]
          description: User role
          example: "STUDENT"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: "testuser"
        email:
          type: string
          format: email
          description: Email address
          example: "test@example.com"
        role:
          type: string
          enum: [STUDENT, LANDLORD, MANAGER, ADMIN]
          description: User role
          example: "STUDENT"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, DELETED]
          description: User status
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T00:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-01T00:00:00"

    ProfileResponse:
      type: object
      properties:
        id:
          type: integer
          description: Profile ID
          example: 1
        userId:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        fullName:
          type: string
          description: Full name
          example: "John Doe"
        gender:
          type: string
          enum: [male, female, other]
          description: Gender
          example: "male"
        phoneNumber:
          type: string
          description: Phone number
          example: "0123456789"
        avatarUrl:
          type: string
          format: uri
          description: Avatar image URL
          example: "https://example.com/avatar.jpg"
        badge:
          type: string
          description: User badge
          example: "Tin uy tín"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T00:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-01T00:00:00"

    ForgotPasswordResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: "Password reset instructions have been sent to your email address."

    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: "Password has been reset successfully. You can now login with your new password."

    VerifyEmailResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address
          example: "user@example.com"
        verified:
          type: boolean
          description: Verification status
          example: true
        verifiedAt:
          type: string
          format: date-time
          description: Verification timestamp
          example: "2024-01-01T10:00:00"

    ResendCodeResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address
          example: "user@example.com"
        expiresAt:
          type: string
          format: date-time
          description: Code expiration timestamp
          example: "2024-01-01T10:05:00"

    VerificationStatusResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address
          example: "user@example.com"
        verified:
          type: boolean
          description: Verification status
          example: false
        attempts:
          type: integer
          description: Number of verification attempts
          example: 1
        maxAttempts:
          type: integer
          description: Maximum allowed attempts
          example: 3
        expiresAt:
          type: string
          format: date-time
          description: Code expiration timestamp
          example: "2024-01-01T10:05:00"
        canAttempt:
          type: boolean
          description: Whether user can attempt verification
          example: true

    TokenCheckResponse:
      type: object
      properties:
        isBlacklisted:
          type: boolean
          description: Whether token is blacklisted
          example: false
        message:
          type: string
          description: Status message
          example: "Token is valid"

    BlacklistStatsResponse:
      type: object
      properties:
        totalBlacklisted:
          type: integer
          description: Total number of blacklisted tokens
          example: 5
        expiredTokens:
          type: integer
          description: Number of expired tokens
          example: 2
        activeTokens:
          type: integer
          description: Number of active blacklisted tokens
          example: 3

    # Room Management Schemas
    RoomDetailResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Room ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          description: Room title
          example: "Cozy Studio Apartment"
        description:
          type: string
          description: Room description
          example: "Beautiful studio near university with modern amenities"
        roomType:
          type: string
          enum: [PHONG_TRO, CAN_HO, NHA_NGUYEN_CAN, HOMESTAY]
          description: Type of room
          example: "PHONG_TRO"
        streetAddress:
          type: string
          description: Street address
          example: "123 Nguyen Hue Street"
        city:
          type: string
          description: City name
          example: "Ho Chi Minh City"
        district:
          type: string
          description: District name
          example: "District 1"
        ward:
          type: string
          description: Ward name
          example: "Ben Nghe Ward"
        latitude:
          type: number
          format: double
          description: Latitude coordinate
          example: 10.7769
        longitude:
          type: number
          format: double
          description: Longitude coordinate
          example: 106.7009
        pricePerMonth:
          type: number
          description: Monthly rent price
          example: 5000000
        areaSqm:
          type: number
          format: double
          description: Area in square meters
          example: 25.5
        status:
          type: string
          description: Room status
          example: "available"
        viewCount:
          type: integer
          description: Number of views
          example: 151
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T00:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-01T00:00:00"
        landlord:
          $ref: '#/components/schemas/LandlordContactResponse'
        images:
          type: array
          items:
            $ref: '#/components/schemas/RoomImageResponse'
        amenities:
          type: array
          items:
            $ref: '#/components/schemas/AmenityResponse'
        reviewSummary:
          $ref: '#/components/schemas/ReviewSummaryResponse'
        analytics:
          $ref: '#/components/schemas/RoomAnalyticsResponse'

    LandlordContactResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Landlord user ID
          example: "456e7890-e89b-12d3-a456-426614174001"
        username:
          type: string
          description: Username
          example: "landlord1"
        email:
          type: string
          format: email
          description: Email address
          example: "landlord@example.com"
        fullName:
          type: string
          description: Full name
          example: "John Landlord"
        phoneNumber:
          type: string
          description: Phone number
          example: "0123456789"
        avatarUrl:
          type: string
          format: uri
          description: Avatar image URL
          example: "https://example.com/landlord-avatar.jpg"

    RoomImageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Image ID
          example: "789e0123-e89b-12d3-a456-426614174002"
        imageUrl:
          type: string
          format: uri
          description: Image URL
          example: "https://example.com/room1.jpg"
        description:
          type: string
          description: Image description
          example: "Main room view"
        isPrimary:
          type: boolean
          description: Whether this is the primary image
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T00:00:00"

    AmenityResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Amenity ID
          example: "012e3456-e89b-12d3-a456-426614174003"
        name:
          type: string
          description: Amenity name
          example: "Wi-Fi"
        description:
          type: string
          description: Amenity description
          example: "High-speed internet connection"
        iconUrl:
          type: string
          format: uri
          description: Icon URL
          example: "https://example.com/wifi-icon.png"

    ReviewSummaryResponse:
      type: object
      properties:
        averageScore:
          type: number
          format: double
          description: Average review score
          example: 4.5
        totalReviews:
          type: integer
          description: Total number of reviews
          example: 10
        fiveStarCount:
          type: integer
          description: Number of 5-star reviews
          example: 6
        fourStarCount:
          type: integer
          description: Number of 4-star reviews
          example: 3
        threeStarCount:
          type: integer
          description: Number of 3-star reviews
          example: 1
        twoStarCount:
          type: integer
          description: Number of 2-star reviews
          example: 0
        oneStarCount:
          type: integer
          description: Number of 1-star reviews
          example: 0

    RoomAnalyticsResponse:
      type: object
      properties:
        totalViews:
          type: integer
          description: Total view count
          example: 151
        viewsThisWeek:
          type: integer
          description: Views this week
          example: 25
        viewsThisMonth:
          type: integer
          description: Views this month
          example: 89
        bookmarkCount:
          type: integer
          description: Number of bookmarks
          example: 12
        lastViewedAt:
          type: string
          format: date-time
          description: Last viewed timestamp
          example: "2024-01-01T10:30:00"
        isBoosted:
          type: boolean
          description: Whether room is boosted
          example: true
        boostExpiresAt:
          type: string
          format: date-time
          description: Boost expiration timestamp
          example: "2024-01-07T00:00:00"

    # Bookmark Management Schemas
    BookmarkRequest:
      type: object
      required:
        - roomId
      properties:
        roomId:
          type: string
          format: uuid
          description: Room ID to bookmark
          example: "123e4567-e89b-12d3-a456-426614174000"

    BookmarkResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        roomId:
          type: string
          format: uuid
          description: Room ID
          example: "456e7890-e89b-12d3-a456-426614174001"
        roomTitle:
          type: string
          description: Room title
          example: "Cozy Studio Apartment"
        roomCity:
          type: string
          description: Room city
          example: "Ho Chi Minh City"
        roomDistrict:
          type: string
          description: Room district
          example: "District 1"
        roomPrice:
          type: number
          description: Room price per month
          example: 5000000
        roomStatus:
          type: string
          description: Room status
          example: "available"
        primaryImageUrl:
          type: string
          format: uri
          description: Primary image URL
          example: "https://example.com/room1.jpg"
        bookmarkedAt:
          type: string
          format: date-time
          description: Bookmark creation timestamp
          example: "2024-01-01T10:00:00"

    # Roommate Post Schemas
    CreateRoommatePostRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Post title
          example: "Looking for roommate near HCMUS"
        description:
          type: string
          description: Post description
          example: "Student looking for clean, quiet roommate to share apartment"
        desiredLocationText:
          type: string
          description: Desired location description
          example: "Near University of Science, District 5"
        budgetMin:
          type: number
          description: Minimum budget
          example: 2000000
        budgetMax:
          type: number
          description: Maximum budget
          example: 4000000

    UpdateRoommatePostRequest:
      type: object
      properties:
        title:
          type: string
          description: Post title
          example: "Updated: Looking for roommate near HCMUS"
        description:
          type: string
          description: Post description
          example: "Updated description"
        desiredLocationText:
          type: string
          description: Desired location description
          example: "Near University of Science, District 5"
        budgetMin:
          type: number
          description: Minimum budget
          example: 2000000
        budgetMax:
          type: number
          description: Maximum budget
          example: 5000000
        status:
          type: string
          enum: [open, closed]
          description: Post status
          example: "open"

    RoommatePostResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Post ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          description: Post title
          example: "Looking for roommate near HCMUS"
        description:
          type: string
          description: Post description
          example: "Student looking for clean, quiet roommate"
        desiredLocationText:
          type: string
          description: Desired location description
          example: "Near University of Science"
        budgetMin:
          type: number
          description: Minimum budget
          example: 2000000
        budgetMax:
          type: number
          description: Maximum budget
          example: 4000000
        status:
          type: string
          enum: [open, closed]
          description: Post status
          example: "open"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T00:00:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-01T00:00:00"
        author:
          $ref: '#/components/schemas/AuthorResponse'

    AuthorResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Author user ID
          example: "456e7890-e89b-12d3-a456-426614174001"
        username:
          type: string
          description: Username
          example: "student1"
        fullName:
          type: string
          description: Full name
          example: "Jane Student"
        avatarUrl:
          type: string
          format: uri
          description: Avatar image URL
          example: "https://example.com/avatar.jpg"

    # Report Management Schemas
    CreateReportRequest:
      type: object
      required:
        - reportedContentType
        - reportedContentId
        - reason
      properties:
        reportedContentType:
          type: string
          enum: [room, user, roommate_post, review]
          description: Type of content being reported
          example: "room"
        reportedContentId:
          type: string
          format: uuid
          description: ID of the content being reported
          example: "123e4567-e89b-12d3-a456-426614174000"
        reason:
          type: string
          description: Reason for reporting
          example: "This room listing contains inappropriate content"

    ReportResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Report ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        reportedContentType:
          type: string
          enum: [room, user, roommate_post, review]
          description: Type of reported content
          example: "room"
        reportedContentId:
          type: string
          format: uuid
          description: ID of reported content
          example: "456e7890-e89b-12d3-a456-426614174001"
        reason:
          type: string
          description: Report reason
          example: "Inappropriate content"
        status:
          type: string
          enum: [pending, reviewed, resolved, dismissed]
          description: Report status
          example: "pending"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T10:00:00"
        reporter:
          $ref: '#/components/schemas/ReporterResponse'
        reportedContent:
          $ref: '#/components/schemas/ReportedContentResponse'

    ReporterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Reporter user ID
          example: "789e0123-e89b-12d3-a456-426614174002"
        username:
          type: string
          description: Reporter username
          example: "reporter1"

    ReportedContentResponse:
      type: object
      properties:
        contentId:
          type: string
          format: uuid
          description: Content ID
          example: "456e7890-e89b-12d3-a456-426614174001"
        contentType:
          type: string
          description: Content type
          example: "room"
        title:
          type: string
          description: Content title
          example: "Reported Room Title"
        summary:
          type: string
          description: Content summary
          example: "Room in Ho Chi Minh City, District 1"
        exists:
          type: boolean
          description: Whether content still exists
          example: true

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: User Management
    description: User account management endpoints
  - name: Profile Management
    description: User profile management endpoints
  - name: Email Verification
    description: Email verification endpoints
  - name: Room Management
    description: Room viewing, search, and analytics endpoints
  - name: Bookmark Management
    description: Room bookmark management endpoints (all authenticated users)
  - name: Roommate Posts
    description: Roommate seeking post management endpoints (student features)
  - name: Report Management
    description: Content reporting and moderation endpoints
  - name: Debug/Testing
    description: Debugging and testing endpoints
