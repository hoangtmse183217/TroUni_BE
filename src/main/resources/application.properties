# ===========================================
# TroUni Backend Application Configuration
# ===========================================

# Application Name
spring.application.name=tro-uni

# ===========================================
# Database Configuration - SQL Server
# ===========================================
# Connect to SQL Server database
# - Server: localhost:1433
# - Database: TroUni
# - Username: sa
# - Password: ${DATA_SOURCE_PASSWORD}
# - Disable encryption and trust server certificate for development

#<---------------- Uncomment this for local test-------------------->
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=TroUni;encrypt=false;trustServerCertificate=true
spring.datasource.username=sa
spring.datasource.password=${DATA_SOURCE_PASSWORD}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.cloud.gcp.sql.enabled=false


# ===========================================
# Database Configuration - Google Cloud Run
# ===========================================

#spring.datasource.url=jdbc:postgresql:///trouni?cloudSqlInstance=trouni-473306:asia-east1:trouni-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory
#spring.datasource.username=
#spring.datasource.password=
#spring.datasource.driver-class-name=org.postgresql.Driver
#
## Spring Cloud GCP SQL Configuration
#spring.cloud.gcp.sql.instance-connection-name=trouni-473306:asia-east1:trouni-db
#spring.cloud.gcp.sql.database-name=trouni
#
## JPA/Hibernate Configuration
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=false

# ===========================================
# JWT Configuration
# ===========================================
# JWT token configuration
# - Secret: Base64 encoded key to sign JWT (256-bit)
# - Expiration: 86400000ms = 24 hours
app.jwt.secret=${JWT_SIGNER_KEY}
app.jwt.expiration=86400000

# ===========================================
# Scheduling Configuration
# ===========================================
# Enable scheduling to run cleanup tasks
# - Cleanup expired blacklisted tokens every 30 minutes
spring.task.scheduling.enabled=true

# ===========================================
# Email Configuration
# ===========================================
# Email configuration for sending verification codes
# - Host: Gmail SMTP server
# - Port: 587 (TLS)
# - Username: Sender email
# - Password: App password (not regular password)
# - Properties: TLS enabled, auth enabled
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=trouni01@gmail.com
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true


# ===========================================
# App Email Configuration
# ===========================================
# Application email configuration
# - From email: Notification sender email
# - From name: Display name when sending emails
app.mail.from=noreply@trouni.com
app.mail.from-name=TroUni