{
	"info": {
		"_postman_id": "trouni-complete-api-collection",
		"name": "TroUni Complete API Collection - Enhanced",
		"description": "Complete API collection for TroUni with ALL endpoints - Enhanced with comprehensive test cases and variable management\n\nIncludes ALL controllers: Auth, User, Profile, Email Verification, Room, Bookmark, Roommate Posts, Reports, Reviews, Room Images, Master Amenities\n\nFeatures:\n- Comprehensive test cases for each API\n- Automatic variable setting and management\n- Response validation\n- Error handling tests\n- Performance monitoring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set default base URL if not set",
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"    console.log('üîß Base URL set to: ' + pm.collectionVariables.get('baseUrl'));",
									"}",
									"",
									"// Generate test data",
									"const timestamp = new Date().getTime();",
									"pm.collectionVariables.set('testTimestamp', timestamp);",
									"pm.collectionVariables.set('testUsername', 'testuser_' + timestamp);",
									"pm.collectionVariables.set('testEmail', 'test_' + timestamp + '@example.com');",
									"",
									"console.log('üöÄ Starting login test with username: ' + pm.collectionVariables.get('testUsername'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Performance monitoring",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Status code validation",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response structure validation",
									"pm.test('Response has correct structure', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"});",
									"",
									"// Authentication data validation",
									"pm.test('Response contains authentication data', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data).to.have.property('token');",
									"        pm.expect(responseJson.data).to.have.property('user');",
									"        pm.expect(responseJson.data.token).to.be.a('string');",
									"        pm.expect(responseJson.data.token.length).to.be.above(10);",
									"    }",
									"});",
									"",
									"// User data validation",
									"pm.test('User data is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.user) {",
									"        const user = responseJson.data.user;",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user.id).to.be.a('string');",
									"        pm.expect(user.username).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Auto-set variables for successful login",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.token) {",
									"        pm.collectionVariables.set('token', responseJson.data.token);",
									"        pm.collectionVariables.set('authToken', responseJson.data.token);",
									"        console.log('‚úÖ JWT token saved: ' + responseJson.data.token.substring(0, 50) + '...');",
									"    }",
									"    if (responseJson.data && responseJson.data.user) {",
									"        pm.collectionVariables.set('userId', responseJson.data.user.id);",
									"        pm.collectionVariables.set('username', responseJson.data.user.username);",
									"        pm.collectionVariables.set('userEmail', responseJson.data.user.email);",
									"        pm.collectionVariables.set('userRole', responseJson.data.user.role);",
									"        console.log('‚úÖ User info saved: ' + responseJson.data.user.username);",
									"    }",
									"}",
									"",
									"// Error handling test",
									"pm.test('No server errors', function () {",
									"    pm.expect(pm.response.code).to.not.be.oneOf([500, 502, 503, 504]);",
									"});",
									"",
									"console.log('‚úÖ Login test completed successfully');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usernameOrEmail\": \"testuser\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "signup"]
						}
					}
				},
				{
					"name": "Get Current User Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "me"]
						}
					}
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "logout"]
						}
					}
				},
				{
					"name": "Login with Google",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accessToken\": \"GOOGLE_ACCESS_TOKEN_HERE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/google-login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "google-login"]
						}
					}
				},
				{
					"name": "Request Password Reset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "forgot-password"]
						}
					}
				},
				{
					"name": "Reset Password with Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resetToken\": \"RESET_TOKEN_FROM_EMAIL\",\n  \"newPassword\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "reset-password"]
						}
					}
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/users",
							"host": ["{{baseUrl}}"],
							"path": ["user", "users"]
						}
					}
				},
				{
					"name": "Get User Details by Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}",
									"if (!pm.collectionVariables.get('username')) {",
									"    pm.collectionVariables.set('username', 'testuser');",
									"    console.log('‚ÑπÔ∏è Using default username=testuser');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{username}}",
							"host": ["{{baseUrl}}"],
							"path": ["user", "{{username}}"]
						}
					}
				},
				{
					"name": "Validate JWT Token Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please set a valid JWT token to check');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{token}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/check-token",
							"host": ["{{baseUrl}}"],
							"path": ["user", "check-token"]
						}
					}
				},
				{
					"name": "Get Token Blacklist Statistics",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/blacklist-stats",
							"host": ["{{baseUrl}}"],
							"path": ["user", "blacklist-stats"]
						}
					}
				},
				{
					"name": "Update Current User Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"updatedusername\",\n  \"email\": \"updated@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/me",
							"host": ["{{baseUrl}}"],
							"path": ["user", "me"]
						}
					}
				},
				{
					"name": "Admin Update User (Admin/Manager Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Admin/Manager role');",
									"}",
									"if (!pm.collectionVariables.get('userId')) {",
									"    pm.collectionVariables.set('userId', '1');",
									"    console.log('‚ÑπÔ∏è Using default userId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"adminupdated\",\n  \"email\": \"adminupdated@example.com\",\n  \"role\": \"LANDLORD\",\n  \"status\": \"ACTIVE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["user", "{{userId}}"]
						}
					}
				},
				{
					"name": "Soft Delete User (Admin/Manager Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Admin/Manager role');",
									"}",
									"if (!pm.collectionVariables.get('userId')) {",
									"    pm.collectionVariables.set('userId', '1');",
									"    console.log('‚ÑπÔ∏è Using default userId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["user", "{{userId}}"]
						}
					}
				},
				{
					"name": "Hard Delete User (Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Admin role (ONLY Admin can hard delete)');",
									"}",
									"if (!pm.collectionVariables.get('userId')) {",
									"    pm.collectionVariables.set('userId', '1');",
									"    console.log('‚ÑπÔ∏è Using default userId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/{{userId}}/hard-delete",
							"host": ["{{baseUrl}}"],
							"path": ["user", "{{userId}}", "hard-delete"]
						}
					}
				}
			]
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Get Current User Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/profile/me",
							"host": ["{{baseUrl}}"],
							"path": ["profile", "me"]
						}
					}
				},
				{
					"name": "Update Current User Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"John Updated Doe\",\n  \"gender\": \"male\",\n  \"phoneNumber\": \"0987654321\",\n  \"avatarUrl\": \"https://example.com/new-avatar.jpg\",\n  \"badge\": \"Updated Badge\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/profile/me",
							"host": ["{{baseUrl}}"],
							"path": ["profile", "me"]
						}
					}
				},
				{
					"name": "Get Profile by User ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first or set a valid JWT token');",
									"}",
									"if (!pm.collectionVariables.get('userId')) {",
									"    pm.collectionVariables.set('userId', '1');",
									"    console.log('‚ÑπÔ∏è Using default userId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/profile/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["profile", "{{userId}}"]
						}
					}
				}
			]
		},
		{
			"name": "Email Verification",
			"item": [
				{
					"name": "Verify Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"verificationCode\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/email-verification/verify",
							"host": ["{{baseUrl}}"],
							"path": ["email-verification", "verify"]
						}
					}
				},
				{
					"name": "Resend Verification Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/email-verification/resend",
							"host": ["{{baseUrl}}"],
							"path": ["email-verification", "resend"]
						}
					}
				},
				{
					"name": "Get Verification Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/email-verification/info?email=user@example.com",
							"host": ["{{baseUrl}}"],
							"path": ["email-verification", "info"],
							"query": [
								{
									"key": "email",
									"value": "user@example.com"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Bookmark Management",
			"item": [
				{
					"name": "Bookmark Room",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roomId\": \"{{roomId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/bookmarks",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks"]
						}
					}
				},
				{
					"name": "Remove Bookmark",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookmarks/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Toggle Bookmark",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookmarks/{{roomId}}/toggle",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks", "{{roomId}}", "toggle"]
						}
					}
				},
				{
					"name": "Get User Bookmarks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookmarks?page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get All User Bookmarks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookmarks/all",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks", "all"]
						}
					}
				},
				{
					"name": "Check Bookmark Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bookmarks/{{roomId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["bookmarks", "{{roomId}}", "status"]
						}
					}
				}
			]
		},
		{
			"name": "Roommate Posts",
			"item": [
				{
					"name": "Create Roommate Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"if (responseJson && responseJson.data && responseJson.data.id) {",
									"    pm.collectionVariables.set('postId', responseJson.data.id);",
									"    console.log('‚úÖ Post ID saved: ' + responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Looking for roommate near HCMUS\",\n  \"description\": \"Student looking for clean, quiet roommate to share apartment\",\n  \"desiredLocationText\": \"Near University of Science, District 5\",\n  \"budgetMin\": 2000000,\n  \"budgetMax\": 4000000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/roommate-posts",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts"]
						}
					}
				},
				{
					"name": "Get Roommate Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.content) {",
									"    const posts = pm.response.json().data.content;",
									"    if (posts.length > 0 && posts[0].id) {",
									"        pm.collectionVariables.set('postId', posts[0].id);",
									"        console.log('‚úÖ Post ID saved: ' + posts[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts?status=open&page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts"],
							"query": [
								{
									"key": "status",
									"value": "open"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Roommate Post Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('postId')) {",
									"    pm.collectionVariables.set('postId', '1');",
									"    console.log('‚ÑπÔ∏è Using default postId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/{{postId}}",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "{{postId}}"]
						}
					}
				},
				{
					"name": "Update Roommate Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('postId')) {",
									"    pm.collectionVariables.set('postId', '1');",
									"    console.log('‚ÑπÔ∏è Using default postId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated: Looking for roommate near HCMUS\",\n  \"description\": \"Updated description - Still looking for clean roommate\",\n  \"budgetMax\": 5000000,\n  \"status\": \"open\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/{{postId}}",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "{{postId}}"]
						}
					}
				},
				{
					"name": "Delete Roommate Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first (Student/Admin/Manager can delete)');",
									"}",
									"if (!pm.collectionVariables.get('postId')) {",
									"    pm.collectionVariables.set('postId', '1');",
									"    console.log('‚ÑπÔ∏è Using default postId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/{{postId}}",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "{{postId}}"]
						}
					}
				},
				{
					"name": "Get Current User's Posts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/my-posts",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "my-posts"]
						}
					}
				},
				{
					"name": "Search Posts by Budget",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/search/budget?minBudget=2000000&maxBudget=5000000&page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "search", "budget"],
							"query": [
								{
									"key": "minBudget",
									"value": "2000000"
								},
								{
									"key": "maxBudget",
									"value": "5000000"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Search Posts by Location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/roommate-posts/search/location?location=University&page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["roommate-posts", "search", "location"],
							"query": [
								{
									"key": "location",
									"value": "University"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Report Management",
			"item": [
				{
					"name": "Create Report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1 for report');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"if (responseJson && responseJson.data && responseJson.data.id) {",
									"    pm.collectionVariables.set('reportId', responseJson.data.id);",
									"    console.log('‚úÖ Report ID saved: ' + responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reportedContentType\": \"room\",\n  \"reportedContentId\": \"{{roomId}}\",\n  \"reason\": \"This room listing contains inappropriate content\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": ["{{baseUrl}}"],
							"path": ["reports"]
						}
					}
				},
				{
					"name": "Get User Reports",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/my-reports",
							"host": ["{{baseUrl}}"],
							"path": ["reports", "my-reports"]
						}
					}
				},
				{
					"name": "Get All Reports (Manager/Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Manager/Admin role');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports?status=pending&page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["reports"],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Update Report Status (Manager/Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Manager/Admin role');",
									"}",
									"if (!pm.collectionVariables.get('reportId')) {",
									"    pm.collectionVariables.set('reportId', '1');",
									"    console.log('‚ÑπÔ∏è Using default reportId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"resolved\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reports/{{reportId}}/status",
							"host": ["{{baseUrl}}"],
							"path": ["reports", "{{reportId}}", "status"]
						}
					}
				},
				{
					"name": "Get Report Statistics (Manager/Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Manager/Admin role');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '1');",
									"    console.log('‚ÑπÔ∏è Using default roomId=1');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/stats/room/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["reports", "stats", "room", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Get Report Categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reports/categories",
							"host": ["{{baseUrl}}"],
							"path": ["reports", "categories"]
						}
					}
				},
				{
					"name": "Get Report Statuses (Manager/Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login with Manager/Admin role');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/statuses",
							"host": ["{{baseUrl}}"],
							"path": ["reports", "statuses"]
						}
					}
				}
			]
		},
		{
			"name": "Room Management",
			"item": [
				{
					"name": "Search Rooms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains search results', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"    if (responseJson.data && responseJson.data.length > 0) {",
									"        pm.collectionVariables.set('roomId', responseJson.data[0].id);",
									"        console.log('‚úÖ Room ID saved: ' + responseJson.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/search?city=Ho Chi Minh City&district=District 1&minPrice=1000000&maxPrice=10000000",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "search"],
							"query": [
								{
									"key": "city",
									"value": "Ho Chi Minh City"
								},
								{
									"key": "district",
									"value": "District 1"
								},
								{
									"key": "minPrice",
									"value": "1000000"
								},
								{
									"key": "maxPrice",
									"value": "10000000"
								}
							]
						}
					}
				},
				{
					"name": "Get Public Rooms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains public rooms', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"    if (responseJson.data && responseJson.data.length > 0) {",
									"        pm.collectionVariables.set('roomId', responseJson.data[0].id);",
									"        console.log('‚úÖ Room ID saved: ' + responseJson.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rooms",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms"]
						}
					}
				},
				{
					"name": "Create New Room",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 3000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has room data', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data).to.have.property('id');",
									"        pm.collectionVariables.set('roomId', responseJson.data.id);",
									"        console.log('‚úÖ Room ID saved: ' + responseJson.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Beautiful Studio Apartment\",\n  \"description\": \"Modern studio apartment in city center\",\n  \"roomType\": \"PHONG_TRO\",\n  \"streetAddress\": \"123 Main Street\",\n  \"city\": \"Ho Chi Minh City\",\n  \"district\": \"District 1\",\n  \"ward\": \"Ben Nghe\",\n  \"latitude\": 10.7769,\n  \"longitude\": 106.7009,\n  \"pricePerMonth\": 5000000,\n  \"areaSqm\": 25.5,\n  \"status\": \"available\",\n  \"images\": [\n    \"https://example.com/image1.jpg\",\n    \"https://example.com/image2.jpg\"\n  ],\n  \"amenities\": [\n    {\n      \"name\": \"WiFi\",\n      \"description\": \"High-speed internet\",\n      \"icon\": \"wifi-icon\",\n      \"isActive\": true\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rooms/room",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "room"]
						}
					}
				},
				{
					"name": "Get Room Details (UUID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains room details', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data).to.have.property('id');",
									"        pm.expect(responseJson.data).to.have.property('title');",
									"        pm.expect(responseJson.data).to.have.property('pricePerMonth');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}/details",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "{{roomId}}", "details"]
						}
					}
				},
				{
					"name": "Update Room Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Room updated successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data).to.have.property('id');",
									"        pm.expect(responseJson.data.title).to.include('Updated');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Beautiful Studio Apartment\",\n  \"description\": \"Updated modern studio apartment in city center\",\n  \"pricePerMonth\": 5500000,\n  \"areaSqm\": 26.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Delete Room by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 204 (No Content)', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('Room deleted successfully', function () {",
									"    pm.expect(pm.response.body).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Get All Rooms (Paginated)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 1500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has pagination data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data).to.have.property('content');",
									"        pm.expect(responseJson.data).to.have.property('totalElements');",
									"        pm.expect(responseJson.data.content).to.be.an('array');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/paginated?page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "paginated"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get All Rooms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('code');",
									"    pm.expect(responseJson).to.have.property('message');",
									"    pm.expect(responseJson).to.have.property('data');",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/all",
							"host": ["{{baseUrl}}"],
							"path": ["api", "rooms", "all"]
						}
					}
				}
			]
		},
		{
			"name": "Review Management",
			"item": [
				{
					"name": "Create Room Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 201 (Created)', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Review created successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.message).to.include('Review created successfully');",
									"    if (responseJson.data && responseJson.data.id) {",
									"        pm.collectionVariables.set('reviewId', responseJson.data.id);",
									"        console.log('‚úÖ Review ID saved: ' + responseJson.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"score\": 5,\n  \"comment\": \"Excellent room! Very clean and modern.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reviews/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["reviews", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Get Reviews by Room",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains reviews', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["reviews", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Update Room Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('reviewId')) {",
									"    pm.collectionVariables.set('reviewId', '550e8400-e29b-41d4-a716-446655440001');",
									"    console.log('‚ÑπÔ∏è Using default review ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Review updated successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    if (responseJson.data) {",
									"        pm.expect(responseJson.data.comment).to.include('Updated');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"score\": 4,\n  \"comment\": \"Updated: Good room with minor issues.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}",
							"host": ["{{baseUrl}}"],
							"path": ["reviews", "{{reviewId}}"]
						}
					}
				},
				{
					"name": "Delete Room Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('reviewId')) {",
									"    pm.collectionVariables.set('reviewId', '550e8400-e29b-41d4-a716-446655440001');",
									"    console.log('‚ÑπÔ∏è Using default review ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Review deleted successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reviews/{{reviewId}}",
							"host": ["{{baseUrl}}"],
							"path": ["reviews", "{{reviewId}}"]
						}
					}
				}
			]
		},
		{
			"name": "Room Image Management",
			"item": [
				{
					"name": "Add Room Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 3000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Images added successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"    if (responseJson.data && responseJson.data.length > 0) {",
									"        pm.collectionVariables.set('imageId', responseJson.data[0].id);",
									"        console.log('‚úÖ Image ID saved: ' + responseJson.data[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"imageUrls\": [\n    \"https://example.com/image1.jpg\",\n    \"https://example.com/image2.jpg\",\n    \"https://example.com/image3.jpg\"\n  ],\n  \"descriptions\": [\n    \"Living room view\",\n    \"Kitchen area\",\n    \"Bedroom\"\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/room-images/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["room-images", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Get Room Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains images', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/room-images/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["room-images", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Delete Room Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('imageId')) {",
									"    pm.collectionVariables.set('imageId', '550e8400-e29b-41d4-a716-446655440002');",
									"    console.log('‚ÑπÔ∏è Using default image ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 204 (No Content)', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('Image deleted successfully', function () {",
									"    pm.expect(pm.response.body).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/room-images/{{imageId}}",
							"host": ["{{baseUrl}}"],
							"path": ["room-images", "{{imageId}}"]
						}
					}
				}
			]
		},
		{
			"name": "Master Amenity Management",
			"item": [
				{
					"name": "Create Master Amenity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('roomId')) {",
									"    pm.collectionVariables.set('roomId', '550e8400-e29b-41d4-a716-446655440000');",
									"    console.log('‚ÑπÔ∏è Using default room ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 201 (Created)', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Amenity created successfully', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('SUCCESS');",
									"    if (responseJson.data && responseJson.data.id) {",
									"        pm.collectionVariables.set('amenityId', responseJson.data.id);",
									"        console.log('‚úÖ Amenity ID saved: ' + responseJson.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"WiFi\",\n  \"description\": \"High-speed internet connection\",\n  \"icon\": \"wifi-icon\",\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/master-amenities/{{roomId}}",
							"host": ["{{baseUrl}}"],
							"path": ["master-amenities", "{{roomId}}"]
						}
					}
				},
				{
					"name": "Get Master Amenities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('amenityId')) {",
									"    pm.collectionVariables.set('amenityId', '550e8400-e29b-41d4-a716-446655440003');",
									"    console.log('‚ÑπÔ∏è Using default amenity ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains amenities', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/master-amenities/{{amenityId}}",
							"host": ["{{baseUrl}}"],
							"path": ["master-amenities", "{{amenityId}}"]
						}
					}
				},
				{
					"name": "Delete Master Amenity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('baseUrl')) {",
									"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
									"}",
									"if (!pm.collectionVariables.get('token')) {",
									"    pm.collectionVariables.set('token', 'YOUR_JWT_TOKEN_HERE');",
									"    console.log('‚ö†Ô∏è Please login first');",
									"}",
									"if (!pm.collectionVariables.get('amenityId')) {",
									"    pm.collectionVariables.set('amenityId', '550e8400-e29b-41d4-a716-446655440003');",
									"    console.log('‚ÑπÔ∏è Using default amenity ID');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code is 204 (No Content)', function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test('Amenity deleted successfully', function () {",
									"    pm.expect(pm.response.body).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/master-amenities/{{amenityId}}",
							"host": ["{{baseUrl}}"],
							"path": ["master-amenities", "{{amenityId}}"]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL for the API server"
		},
		{
			"key": "token",
			"value": "YOUR_JWT_TOKEN_HERE",
			"type": "string",
			"description": "JWT authentication token"
		},
		{
			"key": "authToken",
			"value": "YOUR_JWT_TOKEN_HERE",
			"type": "string",
			"description": "Alternative JWT token variable"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string",
			"description": "Current user ID"
		},
		{
			"key": "username",
			"value": "testuser",
			"type": "string",
			"description": "Current username"
		},
		{
			"key": "userEmail",
			"value": "testuser@example.com",
			"type": "string",
			"description": "Current user email"
		},
		{
			"key": "userRole",
			"value": "STUDENT",
			"type": "string",
			"description": "Current user role"
		},
		{
			"key": "roomId",
			"value": "550e8400-e29b-41d4-a716-446655440000",
			"type": "string",
			"description": "Room ID for testing (set by Create New Room API)"
		},
		{
			"key": "postId",
			"value": "550e8400-e29b-41d4-a716-446655440001",
			"type": "string",
			"description": "Roommate post ID"
		},
		{
			"key": "reportId",
			"value": "550e8400-e29b-41d4-a716-446655440002",
			"type": "string",
			"description": "Report ID"
		},
		{
			"key": "reviewId",
			"value": "550e8400-e29b-41d4-a716-446655440003",
			"type": "string",
			"description": "Review ID"
		},
		{
			"key": "imageId",
			"value": "550e8400-e29b-41d4-a716-446655440004",
			"type": "string",
			"description": "Room image ID"
		},
		{
			"key": "amenityId",
			"value": "550e8400-e29b-41d4-a716-446655440005",
			"type": "string",
			"description": "Master amenity ID"
		},
		{
			"key": "testTimestamp",
			"value": "",
			"type": "string",
			"description": "Timestamp for test data generation"
		},
		{
			"key": "testUsername",
			"value": "",
			"type": "string",
			"description": "Generated test username"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string",
			"description": "Generated test email"
		}
	]
}